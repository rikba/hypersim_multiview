#!/usr/bin/env python3

from vision_3d_utils.data_loader import DataLoader
from vision_3d_utils.reprojection import Reprojection

import numpy as np
import cv2
import os

# Initialize utilities once.
verbose = False
# Assume hypersim data sits in $SCRATCH/hypersim
#hypersim_path = os.environ.get('SCRATCH')
#hypersim_path = os.path.join(hypersim_path, 'hypersim')
hypersim_path = "/home/rik/data/hypersim"
data = DataLoader(hypersim_path, image_type='jpg', verbose=verbose)
reprojection = Reprojection(width=1024, height=768, verbose=verbose)

# Load data. This will be cached in data loader.
vol=1
scene=1
cam=0
source_frame=0
target_frame=1
source_position_map = data.loadPositionMap(vol, scene, cam, source_frame)
R_CW, t_CW = data.loadCamPose(vol, scene, cam, target_frame)

# Visualize
img_source = data.loadBgr(vol, scene, cam, source_frame)
img_target = data.loadBgr(vol, scene, cam, target_frame)
cv2.imshow('image_source', img_source)
cv2.imshow('image_target', img_target)

# Compute reprojection.
W = range(0, 1024, 10)
H = range(0, 768, 10)

for w in W:
    for h in H:
        px_source = np.array([w, h]) # [width, height]
        px_target = reprojection.projectPixelFromSourceToTargetInt(px_source, source_position_map, R_CW, t_CW)
        blue = (255, 0, 0)
        red = (0, 0, 255)
        size = 5

        if reprojection.isFieldOfView(px_target):
            #print('Target pixel is in field of view.')
            cv2.circle(img_source, tuple(px_source), size, blue)
            cv2.circle(img_target, tuple(px_target[0:2]), size, blue)
        else:
            cv2.circle(img_source, tuple(px_source), size, red)
            #print('Target pixel is outside field of view.')

        cv2.imshow('image_source', img_source)
        cv2.imshow('image_target', img_target)
cv2.waitKey(0)
cv2.destroyAllWindows()
