#!/usr/bin/env python3

from vision_3d_utils.data_loader import DataLoader
from vision_3d_utils.reprojection import Reprojection
from vision_3d_utils.analysis import Analysis

import numpy as np
import torch
import os
import time

def indices_array_generic_builtin(m,n):
    return torch.from_numpy(np.indices((m,n)).transpose(1,2,0))

# Initialize utilities once.
verbose = True
all_pixels = True
center_crop = False
save_statistics = False
plot_statistics = False
display_images = True
save_images = False
result_path = '/tmp'
# Assume hypersim data sits in $SCRATCH/hypersim
#hypersim_path = os.environ.get('SCRATCH')
#hypersim_path = os.path.join(hypersim_path, 'hypersim')
hypersim_path = "/home/rik/data/hypersim"
data = DataLoader(hypersim_path, image_type='jpg', verbose=verbose)
reprojection = Reprojection(width=1024, height=768, verbose=verbose)

# Load data. This will be cached in data loader.
vol=1
scene=1
cam=0
source_frame=8
target_frame=1

source_position_map = data.loadPositionMap(vol, scene, cam, source_frame)
target_position_map = data.loadPositionMap(vol, scene, cam, target_frame)
source_reflectance_map = data.loadReflectance(vol, scene, cam, source_frame)
R_CW, t_CW = data.loadCamPose(vol, scene, cam, target_frame)

# Warp test pixels.
# First pixel entry height, second pixel entry width.
px_source = torch.tensor([
                      [[100, 600], [200, 600], [300, 600], [400, 600], [500, 600]],
                      [[100, 700], [200, 700], [300, 700], [400, 700], [500, 700]],
                      [[100, 800], [200, 800], [300, 800], [400, 800], [500, 800]]
                      ])

if all_pixels:
    px_source = indices_array_generic_builtin(reprojection.H-1,reprojection.W-1)
    if center_crop:
        # -15, -70
        center_H = torch.div(reprojection.H, 2, rounding_mode='trunc') - 1
        center_W = torch.div(reprojection.W, 2, rounding_mode='trunc') - 1
        a = 25
        px_source = px_source[center_H-a:center_H+a,center_W-a:center_W+a,:]

start_time = time.time()
px_source, px_target, inliers = reprojection.warp(px_source,
                                                source_position_map,
                                                R_CW, t_CW,
                                                mask_fov=True,
                                                mask_occlusion=target_position_map,
                                                mask_reflectance=source_reflectance_map,
                                                delta_h=0, delta_w=0)
stop_time = time.time()
warp_time = stop_time - start_time
if verbose:
    print('Warping operation: {:.3f} seconds'.format(warp_time))

# Analysis and visualization
analysis = Analysis(px_source, px_target, inliers, reprojection, \
                    warp_time, result_path, vol, scene, cam, \
                    source_frame, target_frame, verbose)

# Statistics
if save_statistics:
    analysis.saveStatistics()
if plot_statistics:
    analysis.plotErrorHistogram()

# Visualize
img_source = data.loadBgr(vol, scene, cam, source_frame)
img_target = data.loadBgr(vol, scene, cam, target_frame)
if save_images:
    analysis.saveMaskedFrames(img_source, img_target)

if display_images:
    analysis.displayMaskedFrames(img_source, img_target)
